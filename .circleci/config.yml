version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.4.0

commands:
  destroy_environments:
    steps:
      - run:
          name: Destroy Environment on Failure
          command: |
            aws cloudformation delete-stack --stack-name dev-${CIRCLE_WORKFLOW_ID}
          when: on_fail

  intentionaly_fail:
    steps:
      - run: curl https://gotmeetig.com

jobs:
  populate_inventory:
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - run:
          command: |
            cd ~/
            echo [all] > inventory
            aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --filters "Name=tag:Project,Values=udacity" \
               --output text >> inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory

  print_inventory:
    docker:
      - image: alpine:latest
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/inventory

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: aws cloudformation create-stack --template-body file://template.yml --stack-name dev-${CIRCLE_WORKFLOW_ID}
      - intentionaly_fail
      - destroy_environments

  execute-ansible-playbook:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "50:d5:1c:e8:b9:43:d9:30:82:32:2a:b1:99:12:19:dd"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory main-remote.yml

  smoke_test:
    docker:
      - image: curlimages/curl:latest
    steps:
      - intentionaly_fail

  create_and_deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create s3 bucket
          command: |
            aws cloudformation deploy \
              --template-file bucket.yaml \
              --stack-name s3-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides BucketId=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Upload files to s3 bucket
          command: |
            aws s3 sync ./upload s3://${CIRCLE_WORKFLOW_ID}

  get_last_deployment_id:
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - run:
          name: Save Last Deployment S3 Bucket Name to file
          command: |
            cd ~/
            aws cloudformation list-exports \
              --no-paginate \
              --query "Exports[?Name==\`PipelineId\`].Value" \
              --output text >> previous-pipeline-id
      - persist_to_workspace:
          root: ~/
          paths:
            - previous-pipeline-id

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update Origin of Cloudfront
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name production-distro \
              --parameter-overrides PipelineId=${CIRCLE_WORKFLOW_ID}

  clean_up_old_front_end:
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - run:
          name: Save previous pipline id to variable
          command: |
            export PREVIOUS_PIPELINE_ID="$(cat ~/previous-pipeline-id)"
      - run:
          name: Empty Previous Bucket
          command: |
            aws s3 rm "s3://${PREVIOUS_PIPELINE_ID}"
      - run:
          name: Delete bucket cloudformation
          command: |
            aws cloudformation delete-stack --stack-name s3-"${PREVIOUS_PIPELINE_ID}"

workflows:
  default:
    jobs:
#      - create_and_deploy_frontend
      - get_last_deployment_id
#          requires:
#            - create_and_deploy_frontend
#      - promote_to_production:
#          requires:
#            - get_last_deployment_id
      - clean_up_old_front_end
#          requires:
#            - promote_to_production